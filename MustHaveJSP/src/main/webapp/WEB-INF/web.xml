<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://jakarta.ee/xml/ns/jakartaee" xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd" id="WebApp_ID" version="5.0">
  <display-name>MustHaveJSP</display-name>
  	<!-- 배포 서술자(deployment descriptor) -->
	<!--   웹 애플리케이션에 대한 여러 가지 설정을 저장하는 곳 -->
  	<!-- 
  		웹컴파일리스트 : 웹 애플리케이션을 실행했을 때 파일명을 지정하지 않는 경우
  			하위에 기술한 파일을 찾아 자동으로 실행한다. 만약 해당 파일이 없다면 
  			404에러가 발생한다.
   	-->
  	<welcome-file-list>
	    <welcome-file>index.html</welcome-file>
	    <welcome-file>index.jsp</welcome-file>
	    <welcome-file>index.htm</welcome-file>
	    <welcome-file>default.html</welcome-file>
	    <welcome-file>default.jsp</welcome-file>
	    <welcome-file>default.htm</welcome-file>
 	</welcome-file-list>
  
  	<context-param>
   		<param-name>INIT_PARAM</param-name><!-- INIT_PARAM을 설정하지 않으면 null을 반환 -->
   		<param-value>web.xml에 저장한 초기화 매개변수</param-value>
  	</context-param>
  	
  	<!-- 
   		웹애플리케이션에서 예외(에러) 발생시 처리할 페이지를 지정한다.
   		404 : Not found. 페이지를 찾을 수 없을 때 발생.
   		405 : Method not allowed. get / post 방식으로 전송시 해당 요청을 
   			처리할 메서드가 없을 때 발생
   		500 : Internal server error. 서버 내부오류로 오타가 있거나 로직에
   			문제가 있어 웹서버가 요청을 처리할 수 없을 때 발생.
   			
   		* 에러페이지 처리는 실제 서비스에서는 반드시 필요한 부분이지만 개발시에는
   		에러를 확인한 후 디버깅하면서 진행해야 하므로 개발이 완료될때까지는 주석
   		으로 처리해 두는 것이 좋다. 
   	-->
<!--   	<error-page> -->
<!-- 		<error-code>404</error-code> -->
<!-- 		<location>/02ImplicitObject/Exception.jsp</location> -->
<!-- 	</error-page> -->
<!-- 	<error-page> -->
<!-- 		<error-code>405</error-code> -->
<!-- 		<location>/02ImplicitObject/Exception.jsp</location> -->
<!-- 	</error-page> -->
<!-- 	<error-page> -->
<!-- 		<error-code>500</error-code> -->
<!-- 		<location>/02ImplicitObject/Exception.jsp</location> -->
<!-- 	</error-page> -->
  	
  	<!-- 
   		오라클 접속정보를 컨테스트 초기화 파라미터로 설정함.
   		해당 정보는 application 내장객체를 통해 값을 읽을 수 있다.
    -->
  	<context-param>
	  <param-name>OracleDriver</param-name>	
	  <param-value>oracle.jdbc.OracleDriver</param-value>
	</context-param>
	<context-param>
	  <param-name>OracleURL</param-name>	
	  <param-value>jdbc:oracle:thin:@localhost:1521:xe</param-value>
	</context-param>
	<context-param>
	  <param-name>OracleId</param-name>	
	  <param-value>musthave</param-value>
	</context-param>
	<context-param>
	  <param-name>OraclePwd</param-name>	
	  <param-value>1234</param-value>
	</context-param>
	
	<!-- 유지시간 20분으로 설정 -->
<!-- 	<session-config> -->
<!-- 	   <session-timeout>20</session-timeout> -->
<!-- 	</session-config> -->
		
	<!-- 
		한글깨짐에 대한 필터 설정 : 현재 개발중인 웹 애프리케이션 전체에 해당
			필터를 적용한다. 웹 애플리케이션으로 들어오는 모든 요청에 대해
			문자 인코딩을 UTF-8로 하겠다는 필터 설정이다. 
	 -->
	<filter>
    	<filter-name>SetCharEncoding</filter-name>
   		<filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
	   <init-param>
	     <param-name>encoding</param-name>
	     <param-value>utf-8</param-value>
	   </init-param>
 	</filter>
	<filter-mapping>
	  <filter-name>SetCharEncoding</filter-name>
	  <url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 게시판 페이징 처리를 위한 파라미터 추가 [예제9-3]-->
	<!-- 한페이지에 출력할 게시물의 갯수 설정 : 10개씩 출력 -->
	<context-param>
		<param-name>POSTS_PER_PAGE</param-name>
		<param-value>10</param-value>
	</context-param>
	<!-- 한블럭당 출력할 페이지번호의 갯수 설정 : 5페이지씩 출력 -->
	<context-param>
		<param-name>PAGES_PER_BLOCK</param-name>
		<param-value>5</param-value>
	</context-param>
	
	<!-- 서블릿 매핑 예제12-1 -->
	<!-- 
		웹애플리케이션으로 요청이 들어올때 url-pattern에 지정되었는지
		확인하여 일치하면 해당 요청은 servlet-class에 지정된 서블릿 클래스로
		전달한다. 이때 servlet-name에 지정한 이름을 통해 요청명과 서블릿을 
		매핑한다. 즉 특정한 요청이 있을때 해당 요청을 전달하기 위한 서블릿 
		클래스를 설정하는것을 "매핑"이라 한다.
	 -->
	<servlet>  <!-- 서블릿 등록 -->
		<servlet-name>HelloServlet</servlet-name>	<!-- 서블릿 참조할 때 사용할 이름 -->
		<servlet-class>servlet.HelloServlet</servlet-class>	<!-- 서블릿을 패키지포함 명시 -->
	</servlet>	
	<servlet-mapping>   <!-- 서블릿과 요청명(요청 URL) 매핑 -->
		<servlet-name>HelloServlet</servlet-name>	<!-- <servlet>에서 사용할 이름과 동일 -->
		<url-pattern>/12Servlet/HelloServlet.do</url-pattern>	<!-- 요청명으로 사용할 경로 -->
	</servlet-mapping>
	
	<!-- 서블릿 매핑 2(예제 12-7) -->
	<!-- 서블릿에서 즉시 요청에 대한 결과는 출력한다. -->
	<servlet>
		<servlet-name>DirectServletPrint</servlet-name>
		<servlet-class>servlet.DirectServletPrint</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>DirectServletPrint</servlet-name>
		<url-pattern>/12Servlet/DirectServletPrint.do</url-pattern>
	</servlet-mapping>
	
	<!-- 회원인증을 위한 서블릿 매핑 -->
	<servlet>
		<servlet-name>MemberAuth</servlet-name>
		<servlet-class>servlet.MemberAuth</servlet-class>
		<!-- 
			해당 서블릿 내에서만 사용할 수 있는 초기화 파라미터.
			context-param으로 정의하는 컨테스트 초기화 파라미터의 경우
			웹애플리케이션 전체에서 사용할 수 있는 전역상수라면, 해당
			파라미터는 지역상수라고 할 수 있다.
		 -->
		 <!-- 서블릿에서 사용할 초기화 매개변수를 지정 
		 관리자 아이디가 “nakja”임을 전달한 것입니다.` -->
		<init-param>
			<param-name>admin_id</param-name>
			<param-value>nakja</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>MemberAuth</servlet-name>
		<url-pattern>/12Servlet/MemberAuth.mvc</url-pattern>
	</servlet-mapping>
	
	<!-- Model2방식의 자료실형 게시판 구하기 -->
	<!-- 리스트(목록) 서블릿 매핑 -->
	<servlet>
		<servlet-name>MVCBoardList</servlet-name> <!-- 서블릭 이름 -->
		<servlet-class>model2.mvcboard.ListController</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>MVCBoardList</servlet-name>
		<url-pattern>/mvcboard/list.do</url-pattern> <!-- 요청명 -->
	</servlet-mapping>
	
	<!-- 글쓰기로 진입하기 위한 매핑 (예제 14-7) -->
	<servlet>
    <servlet-name>MVCBoardWrite</servlet-name>
    <servlet-class>model2.mvcboard.WriteController</servlet-class>
	    <multipart-config>
	      <max-file-size>1048576</max-file-size> <!-- 개별파일 최대 크기 : 1MB -->
	      <max-request-size>10485760</max-request-size> <!-- 전체 파일 최대 크기 : 10MB -->
	    </multipart-config>
	</servlet>  
  	<servlet-mapping>
    	<servlet-name>MVCBoardWrite</servlet-name>
    	<url-pattern>/mvcboard/write.do</url-pattern>
	</servlet-mapping>
	
</web-app>